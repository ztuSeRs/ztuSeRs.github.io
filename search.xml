<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025.3.20/5</title>
      <link href="/2025/03/20/2025.3.20/"/>
      <url>/2025/03/20/2025.3.20/</url>
      
        <content type="html"><![CDATA[<p>​今天复习了u4单词和主语语法，大雁老师讲的确实很有意思。我确实低估了英语语法的难度。在社团感觉到说不上来的感受，但是我觉得我想多出去走走，这周六有一个“nctf”比赛，周末是校赛，我发现好像除了我自己，不甚至我自己，都没有办法按照我所想的和运行（并不是控制的那种意思）。今天也很不在状态，我感觉到自己是在浪费生命，或许我要是得了一个绝症还是一件令我开心得事情，必竟生命已经倒计时，我的倒计时要是被提前至少我是知道自己的倒计时的时间了。</p><p>​好像每天发生的事情都会给我带来焦虑，我不知道这种感觉是否是正确的，但是弄得我很难受，吵闹，咋呼，令人作呕，仿佛世间所有的美好都与我擦肩而过，我看得见他们，但却握不住他们，或许这就是我这一生的基调吧。窥探别人的幸福令我焦虑，深挖自己的历史令我抑郁，我在这些情感的交织下变得疯狂。世界暗淡，雷声四起，雨点擦过我的睫毛，我摊开双手，迎接这一场疯狂。这仿佛才是我应有的人生格调，我在这种感受下，逐渐兴奋，癫狂。似乎逃离了这平静的世界，拥抱混沌。我睁开眼，风穿透我的四肢，像电流一般爬满我的身体。好像是大自然的怒吼，怒吼着告诉我，还有一线生机。</p><p>​歌曲能给我们带来情绪上的改变，我更希望自己能够不跟别人说话交流，但是那是对的吗？那是不对的，我知道这种氛围是不对的，但是我没有办法去这么做，因为这个环境就是不正常。世界仿佛已经变得畸形，我不知道我该何去何从，我也不知道我是否能够去能够从。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析</title>
      <link href="/2025/03/19/%E6%B5%81%E9%87%8F%E5%8C%85/"/>
      <url>/2025/03/19/%E6%B5%81%E9%87%8F%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="一-ack包"><a href="#一-ack包" class="headerlink" title="一.ack包"></a>一.ack包</h4><p><strong>TCP协议中的一种数据包，用于确认接收到的数据</strong></p><p>（一般直接筛选掉）他只是确认用的</p><h4 id="SMTP："><a href="#SMTP：" class="headerlink" title="SMTP："></a>SMTP：</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>路线规划</title>
      <link href="/2025/03/19/%E8%B7%AF%E7%BA%BF/"/>
      <url>/2025/03/19/%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ps：细节在下一篇文章里</p></blockquote><blockquote><blockquote><p>最近有点想写小说的冲动，但是文笔不够，做点诗歌放在里面也是不错的</p></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025.3.14小记</title>
      <link href="/2025/03/12/2025.3.14/"/>
      <url>/2025/03/12/2025.3.14/</url>
      
        <content type="html"><![CDATA[<p>ok,写点日记感觉blog不写点日记不太像一个blog，也可能是实在没啥能写的了</p><p>开始今天的日记：</p><p>这几天都早上7点起的床，身体也逐渐适应了，昨天晚上喝了几杯原浆就醉了，真的难受，幸亏早上没有头疼</p><p>，今天上了计算机操作系统（OS）学习了很多知识，但是今晚上还没有复习，记住的并不是很多。今天格外的累</p><p>明天说好了一起去外面玩，但是，明天我得去医院，我准备早上早起去医院，然后去买药。今天英语没有复习</p><p>这两天状态都不是很好，我得赶紧调整一下状态，在饮食上也有点问题感觉，该少吃点油腻的东西，第一次写日记也不知道该写什么，明天还要去买药，</p><p>私は落ちることができません</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Debug</title>
      <link href="/2024/10/30/Debug/"/>
      <url>/2024/10/30/Debug/</url>
      
        <content type="html"><![CDATA[<p>将IDA安装目录dbgsrv文件夹里的linux_server64拷贝到64位的linux虚拟机中；</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YTk2ZmRjNTg2ODBiMmIxNWNiMzQyOWE1NmEwMmY5ZDhfUmVnM09lWXBEV1dQakV4M0F2VVpCeXdZN1Y3eEdPNWVfVG9rZW46QTZMQmJEZGFMb0ExSGZ4RHlGYmNRaG9hbkJlXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MWQ5MDU1M2QxNWY1NGJjYTc1YmEyYWY4OGIxNGIzMjdfaDNFYUxqN1NHRGFQaHdPTU15b0dyazRVd3JGOTFKampfVG9rZW46VWNpWmJwS2ZTb0NEV0R4dXE0VGNUeHdpbmJkXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>在虚拟机的终端中通过命令chmod 777 linux_server64为程序添加可执行权限；</p><p>通过命令.&#x2F;linux_server64开启服务端；</p><p>在IDA中点击Debugger，添加Remote Linux Debugger</p><p>点击Debugger下的Process Option进行如下配置：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MzdiZDY3NWIyOGZlNTVhYjZlYTljYWQ2OGVlODIzODNfMENLazFjSXJuZ1M1UjVxc2tzc0ExOFQyY2RaS1FQQ2FfVG9rZW46TTlhNGIxa0JSb0FUQnJ4MGZyMWNlZlBRblNlXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>需要更改的只有Hostname那一行：在虚拟机中使用ifconfig查看</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MzAzYTgwZTcyZDMwMDY4NGYyMThkY2JkM2EzZGE0ZDJfS1dYOWE3cnk3ZGlhelZkWnhra3dLVDJZSFhwQ0x2bERfVG9rZW46SXE3NGJSMnNmb0xpeWZ4QXlETmNCcWVSbmdkXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>后面的端口默认23946</p><p>前三行都是可执行文件在linux虚拟机中的位置</p><p>Hostname是虚拟机的IP，端口用默认值</p><p>动态调试的时候启动Linux_serverx64服务之后在ida中选择远程Linux调试就OK了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校赛wp</title>
      <link href="/2024/10/24/%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2024/10/24/%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p>1.用die打开查壳</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YWM0NGQzNzQyYmUzZWM3ZWU1MGNkMmVmMjI5ZWVhMzJfdE52VVJ5MzVIRHBHNk5qQ0U4YVdFYndaVlN6ZjJTTEVfVG9rZW46UXNpR2I0OTlvb0NMUkF4MGFUOGNkbG9tbm1mXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>发现是32位的然后是无壳：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=NTMwMjFmMzc5MmQ1OTE5MTFjMGRjZTA3MGM2MTU5NjFfNm9qRTRqSGx6dG1YWllVMW5uTVJhcE0wZXQ1V0JJNWRfVG9rZW46QjZMVGJISzBUb1lZRXJ4ODIyMGNjRm5SbmRoXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>这是数据</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmYzZjdjOTQwNWRiZTliYjg3MmQzNjQ3YzBlZDU5NzBfNXQ3WDZyOGtWVnVMRVBOR1FRSEJuR1FTSmNWTlJjaDhfVG9rZW46QkQwYmJjV2dBb21JSnl4NFRLWGNibUlqbmZnXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>点他按“d”</p><p>变成这个</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MTkyOTc0NmJmMjVjM2Q5MTQ4MTQxYWQzZDEwZTE1YjJfYjNqRWhxSjdsYlNZdFV1YTJQbTlITFNZcTZoaEowZ2lfVG9rZW46SkJGU2JrNWU5b3U5UmF4WFNJSWM4SUJqbjNkXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MDgzYmM1Mzk3ZGYzOTRjMDRhNTgxMTMwMjMzNDE1OTZfWTBLNWNYUjhIWnZzcVdvR0NjOVBieFRwbERNTzh4T2xfVG9rZW46SGdrMWJwQjVIb2pnam14RjlQSGNHN3hHbmxlXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>选中使用convert这个功能</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjRjYmZhMjQwYWNjNjlmNWE2OTE1MmVjYWVjYzM1ZTdfSFBNcDZMN2JHbWwyM2J5MldRNEFpSlU5MUNsUlA1dE1fVG9rZW46VDNqYWIzQ3hqb2JYMEF4WkY0bGN5UXI5bjlkXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>选中这个C++byte这个选项</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YTE0MTk3Njk4ZGU5ZGM1ZjgzZDVmZTBhNDBlNTYzNzJfcG9EM0ZwdlpOM3o5STFSQWxUd0NjdFJJYjVrZFZlU0FfVG9rZW46TnVhSmJwMDdob3p5WnR4NnN6RWNZVUhhblhmXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YzFlOGRlYWQzZWIzYmFmNmZkZTVlNTI4YjMxMDBmMmNfNlR1Uk5pUDQyWHNuWVhTQWp0ck5KNHRDTHlQMkhzcTlfVG9rZW46TkJzMmI0dWM0b1BabE14dThZOGM2V1FobndiXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>写个python脚本就出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x49</span>, <span class="number">0x52</span>, <span class="number">0x7C</span>, <span class="number">0x7F</span>, <span class="number">0x37</span>, <span class="number">0x55</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x4C</span>, <span class="number">0x46</span>, <span class="number">0x6E</span>,<span class="number">0x32</span>,<span class="number">0x66</span>,<span class="number">0x7a</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]^=<span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hook</title>
      <link href="/2024/10/22/hook/"/>
      <url>/2024/10/22/hook/</url>
      
        <content type="html"><![CDATA[<p>第一次hook成功有点兴奋所以写一篇总结：</p><h2 id="1whatishook"><a href="#1whatishook" class="headerlink" title="1whatishook"></a>1whatishook</h2><p>xposed是一款可以在不修改APK的情况下景程序运行的框架，基于它可以制作出许多功能强大的模块，且在功能不,冲突的情况下同时运作。在这个框架下，我们可以编写并</p><p>加载自己编写的插件APP，实现对目标apk的注入拦载等。</p><p>假如签名校验无法绕过，则可利用xposed或frida去hook</p><p>原理</p><p>用自己实现的app_process普换掉了系统原本提供的app_process，加载一个额外的jar包，入口从原来的:com.android.internal.0sygoteInit.main(O)被替换成了:</p><p>de.robvandroid.xposed.XposedBridge.main(),</p><p>创建的Zygote进程就变成Hook的zygote进程了，从而完成对zygote进程及其创建的Dalvik&#x2F;ART虚拟机的劫持(zytoge注入)</p><h2 id="2开始配置xposed："><a href="#2开始配置xposed：" class="headerlink" title="2开始配置xposed："></a>2开始配置xposed：</h2><p>.Android Studio创建新项目</p><p>2.将下载的xposedBridgeApi.jar包拖进libs文件夹</p><p>3.右击jar包，选择add as library</p><p>4.修改xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedmodule&quot;android:value=&quot;true&quot; /&gt;<span class="comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposeddescription&quot;android:value=&quot;这是一个Xposed模块&quot; /&gt;<span class="comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedminversion&quot;android:value=&quot;89&quot; /&gt;</span><br></pre></td></tr></table></figure><p>5.修改build.gradle,将此处修改为compileOnly 默认的是implementation</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">implementation</span> 使用该方式依赖的库将会参与编译和打包</span><br><span class="line">compileOnly 只在编译时有效，不会参与打包</span><br></pre></td></tr></table></figure><p>6.新建–&gt;Folder–&gt;Assets Folder，创建xposed_init(不要后缀名):只有一行代码，就是说明入口类</p><p>记得详细到类名（第一次就是没详细到类名出现问题耗了半天）S</p><p>7.新建Hook类，实现IXposedHookLoadPackage接口，然后在handleLoadPackage函数内编写Hook逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage; </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了IXposed HookLoad SPackag便拥有了hook的能力</p><h2 id="3如何去实际hook"><a href="#3如何去实际hook" class="headerlink" title="3如何去实际hook"></a>3如何去实际hook</h2><p>首先连接到模拟机：我这个as直接给我连接到了有点nb平常应该是需要用adb来连接</p><p>前面都配置完之后写Hook的逻辑之后先启动钩子在启动程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                    String <span class="built_in">str</span> = (String) param.args[<span class="number">0</span>];</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 被调用: str=&quot;</span> + <span class="built_in">str</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                    param.setResult(<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">int</span> result = (<span class="built_in">int</span>) param.getResult();</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 结果=&quot;</span> + result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);//这段代码使用了 Xposed 框架中的 XposedHelpers.findAndHookMethod 方法，主要用于在指定类的方法调用时插入自定义逻辑。具体来看，代码的各个部分的意义如下：</span><br><span class="line"></span><br><span class="line">           // <span class="string">&quot;com.example.test.MainActivity&quot;</span>：这是你要拦截的目标类的全名。在这里，MainActivity 是该应用的一个</span><br><span class="line">            //Activity。</span><br><span class="line"></span><br><span class="line">            //loadPackageParam.classLoader：这是加载该应用的类加载器，确保可以找到并操作目标类。</span><br><span class="line"></span><br><span class="line">            //<span class="string">&quot;check&quot;</span>：这是要拦截的方法名称。在这个例子中，是 MainActivity 类中的 check 方法。</span><br><span class="line"></span><br><span class="line">            //String.<span class="keyword">class</span>：这是方法参数的类型。在这个例子中，check 方法接受一个 String 类型的参数。</span><br><span class="line"></span><br><span class="line">            //new XC_MethodHook() &#123; ... &#125;：这是一个匿名类，用于定义你希望在 check 方法调用时执行的逻辑。这个类可以重写以下两个方法：</span><br><span class="line"></span><br><span class="line">            //beforeHookedMethod：在目标方法被调用之前执行的代码。</span><br><span class="line">            //afterHookedMethod：在目标方法被调用之后执行的代码。</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中具体的模板是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是xposed的hook方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/10/19/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/10/19/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>这是一个测试，测试</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
