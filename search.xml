<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XYCTF复现</title>
      <link href="/2025/04/13/xy%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/04/13/xy%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>xyctf复现：</strong></p><p>一：vbs：</p><p><strong>WScript.Echo</strong></p><p>标准RC4：</p><p>密文：</p><p>90df4407ee093d309098d85a42be57a2979f1e51463a31e8d15e2fac4e84ea0df622a55c4ddfb535ef3e51e8b2528b826d5347e165912e99118333151273cc3fa8b2b3b413cf2bdb1e8c9c52865efc095a8dd89b3b3cfbb200bbadbf4a6cd4</p><p>密钥：</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps1.jpg" alt="img"> </p><p>flag：flag{We1c0me_t0_XYCTF_2025_reverse_ch@lleng3_by_th3_w@y_p3cd0wn‘s_chall_is_r3@lly_gr3@t_&amp;_fuN!}</p><p>二：moon</p><p>一进去没有main函数；</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps2.jpg" alt="img"> </p><p>shift+F12；</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps3.jpg" alt="img"> </p><p>x交叉引用，分析函数</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps4.jpg" alt="img"> </p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps5.jpg" alt="img"> </p><p>可以猜出来是c语言里的random(seed)函数，可能是明文xor random(seed)里的其中一个随机数，可以爆破也可能是伪随机数数组对应xor</p><p>尝试找密钥</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps6.jpg" alt="img"> </p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps7.jpg" alt="img"> </p><p>这是xor的的函数</p><p>三：Dragon：</p><p>给的是一个.bc文件查阅发现需要用clang来编译 编译完之后就可以在ida里反编译</p><p>放入ida</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps8.jpg" alt="img"> </p><p>每次放入</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps9.jpg" alt="img"> </p><p>分析了一下</p><p>发现就只有个crc破解所以写一个crc爆破的代码检测前几个字符flag{就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># CRC-64 ECMA 多项式</span></span><br><span class="line">POLY = <span class="number">0x42F0E1EBA9EA3693</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crc64_custom</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    crc = <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line">        crc ^= b &lt;&lt; <span class="number">56</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">            <span class="keyword">if</span> crc &amp; (<span class="number">1</span> &lt;&lt; <span class="number">63</span>):</span><br><span class="line">                crc = (crc &lt;&lt; <span class="number">1</span>) ^ POLY</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                crc &lt;&lt;= <span class="number">1</span></span><br><span class="line">            crc &amp;= <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    <span class="keyword">return</span> ~crc &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你提供的 12 个 CRC-64 密文</span></span><br><span class="line">target_crcs = [</span><br><span class="line">    <span class="number">0xDC63E34E419F7B47</span>, <span class="number">0x031EF8D4E7B2BFC6</span>, <span class="number">0x12D62FBC625FD89E</span>,</span><br><span class="line">    <span class="number">0x83E8B6E1CC5755E8</span>, <span class="number">0xFC7BB1EB2AB665CC</span>, <span class="number">0x9382CA1B2A62D96B</span>,</span><br><span class="line">    <span class="number">0xB1FFF8A07673C387</span>, <span class="number">0x0DA81627388E05E1</span>, <span class="number">0x9EF1E61AE8D0AAB7</span>,</span><br><span class="line">    <span class="number">0x92783FD2E7F26145</span>, <span class="number">0x63C97CA1F56FE60B</span>, <span class="number">0x9BD3A8B043B73AAB</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可见字符集（你可以限制为更小范围加快速度）</span></span><br><span class="line">visible_chars = [<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7F</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存每组2字节明文</span></span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始逐个爆破</span></span><br><span class="line"><span class="keyword">for</span> index, crc_target <span class="keyword">in</span> <span class="built_in">enumerate</span>(target_crcs):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 爆破第 <span class="subst">&#123;index + <span class="number">1</span>&#125;</span> 个 CRC: <span class="subst">&#123;crc_target:016X&#125;</span>&quot;</span>)</span><br><span class="line">    found = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.product(visible_chars, repeat=<span class="number">2</span>):</span><br><span class="line">        pair = (a + b).encode()</span><br><span class="line">        <span class="keyword">if</span> crc64_custom(pair) == crc_target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;   -&gt; 找到: &#x27;<span class="subst">&#123;a + b&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">            results.append(a + b)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   -&gt; ❌ 未找到匹配！&quot;</span>)</span><br><span class="line">        results.append(<span class="string">&#x27;??&#x27;</span>)  <span class="comment"># 占位符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接 flag</span></span><br><span class="line">flag_body = <span class="string">&#x27;&#x27;</span>.join(results)</span><br><span class="line">final_flag = <span class="string">f&quot;flag&#123;&#123;<span class="subst">&#123;flag_body&#125;</span>&#125;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n爆破完成！&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终 flag =&gt;&quot;</span>, final_flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps10.jpg" alt="img"> </p><p>四lake：</p><p>一拿到打开程序一个字母一个字母的进行输出；提示我们可以能用sleep来找到主函数：</p><p>之后去ida里找</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps11.jpg" alt="img"> </p><p>一直交叉引用找到了这个函数</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps12.jpg" alt="img"> </p><p>动态调试发现前面的几个函数都是输出语句用的；</p><p>一直到</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps13.jpg" alt="img"> </p><p>都是输出字符：下面的byte_100020090[0]是input</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps14.jpg" alt="img"> </p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps15.jpg" alt="img"> </p><p>例如</p><p>操作  操作下标   操作数</p><p>Sub    2,      0x0c</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps16.jpg" alt="img"> </p><p>这就是全部的逻辑了；先进行vm模拟，然后进行位移操作，这就是大概的逻辑</p><p>所以我们逆向的思路就是，先进行位移操作然后在进行vm爆破</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps17.jpg" alt="img"> </p><p>看位移加密：</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps18.jpg" alt="img"> </p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps19.png" alt="img"> </p><p>他是这个意思所以脚本是：</p><p><img src="/./../xy%E5%A4%8D%E7%8E%B0/wps20.jpg" alt="img"> </p><p>然后爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">flag=[<span class="number">0</span>]*<span class="built_in">len</span>(data)</span><br><span class="line">flag1=[<span class="number">0</span>]*<span class="built_in">len</span>(data)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    flag[j]=k</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(table),<span class="number">3</span>):</span><br><span class="line">      <span class="keyword">if</span> table[i]==<span class="number">1</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]+=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">2</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]-=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">3</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]*=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">4</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]//=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">5</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] %= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">6</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">7</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] |= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">8</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] ^= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> flag[j]==s[j]:</span><br><span class="line">      flag1[j]=k</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="comment">#爆破vm</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(flag1[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>这个样子爆破</p><p>就能得到flag：</p><p>flag{L3@rn1ng_1n_0ld_sch00l_@nd_g3t_j0y}</p><p>全部代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一次复刻vm的逆向；</span></span><br><span class="line">table=[<span class="number">0x0002</span>, <span class="number">0x0002</span>, <span class="number">0x000C</span>, <span class="number">0x0001</span>, <span class="number">0x001A</span>, <span class="number">0x0055</span>, <span class="number">0x0001</span>, <span class="number">0x0023</span>, <span class="number">0x000C</span>, <span class="number">0x0002</span>, <span class="number">0x000E</span>, <span class="number">0x0009</span>, <span class="number">0x0001</span>, <span class="number">0x001B</span>, <span class="number">0x0006</span>, <span class="number">0x0008</span>, <span class="number">0x0006</span>, <span class="number">0x0005</span>, <span class="number">0x0008</span>, <span class="number">0x0001</span>, <span class="number">0x0005</span>, <span class="number">0x0002</span>, <span class="number">0x001B</span>, <span class="number">0x000E</span>, <span class="number">0x0002</span>, <span class="number">0x0019</span>, <span class="number">0x0003</span>, <span class="number">0x0002</span>, <span class="number">0x001A</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>, <span class="number">0x0001</span>, <span class="number">0x0003</span>, <span class="number">0x000C</span>, <span class="number">0x0002</span>, <span class="number">0x000C</span>, <span class="number">0x000A</span>, <span class="number">0x0001</span>, <span class="number">0x0025</span>, <span class="number">0x0002</span>, <span class="number">0x0001</span>, <span class="number">0x0020</span>, <span class="number">0x0002</span>, <span class="number">0x0001</span>, <span class="number">0x0009</span>, <span class="number">0x000C</span>, <span class="number">0x0008</span>, <span class="number">0x001A</span>, <span class="number">0x0005</span>, <span class="number">0x0002</span>, <span class="number">0x0004</span>, <span class="number">0x000D</span>, <span class="number">0x0008</span>, <span class="number">0x0008</span>, <span class="number">0x000F</span>, <span class="number">0x0002</span>, <span class="number">0x000A</span>, <span class="number">0x000E</span>, <span class="number">0x0001</span>, <span class="number">0x0010</span>, <span class="number">0x0007</span>, <span class="number">0x0001</span>, <span class="number">0x000C</span>, <span class="number">0x0007</span>, <span class="number">0x0008</span>, <span class="number">0x0022</span>, <span class="number">0x0008</span>, <span class="number">0x0008</span>, <span class="number">0x0015</span>, <span class="number">0x000A</span>, <span class="number">0x0001</span>, <span class="number">0x0027</span>, <span class="number">0x007E</span>, <span class="number">0x0002</span>, <span class="number">0x0007</span>, <span class="number">0x0002</span>, <span class="number">0x0008</span>, <span class="number">0x000F</span>, <span class="number">0x0003</span>, <span class="number">0x0008</span>, <span class="number">0x000A</span>, <span class="number">0x000A</span>, <span class="number">0x0001</span>, <span class="number">0x0022</span>, <span class="number">0x000B</span>, <span class="number">0x0002</span>, <span class="number">0x0012</span>, <span class="number">0x0008</span>, <span class="number">0x0002</span>, <span class="number">0x0019</span>, <span class="number">0x0009</span>, <span class="number">0x0008</span>, <span class="number">0x000E</span>, <span class="number">0x0006</span>, <span class="number">0x0008</span>, <span class="number">0x0000</span>, <span class="number">0x0005</span>, <span class="number">0x0001</span>, <span class="number">0x000A</span>, <span class="number">0x0008</span>, <span class="number">0x0008</span>, <span class="number">0x001B</span>, <span class="number">0x0007</span>, <span class="number">0x0008</span>, <span class="number">0x000D</span>, <span class="number">0x0006</span>, <span class="number">0x0008</span>, <span class="number">0x000D</span>, <span class="number">0x0004</span>, <span class="number">0x0008</span>, <span class="number">0x0017</span>, <span class="number">0x000C</span>, <span class="number">0x0008</span>, <span class="number">0x0022</span>, <span class="number">0x000E</span>, <span class="number">0x0002</span>, <span class="number">0x0012</span>, <span class="number">0x0034</span>, <span class="number">0x0001</span>, <span class="number">0x0026</span>, <span class="number">0x0077</span>]</span><br><span class="line">data=[ <span class="number">0x4A</span>, <span class="number">0xAB</span>, <span class="number">0x9B</span>, <span class="number">0x1B</span>, <span class="number">0x61</span>, <span class="number">0xB1</span>, <span class="number">0xF3</span>, <span class="number">0x32</span>, <span class="number">0xD1</span>, <span class="number">0x8B</span>,</span><br><span class="line">  <span class="number">0x73</span>, <span class="number">0xEB</span>, <span class="number">0xE9</span>, <span class="number">0x73</span>, <span class="number">0x6B</span>, <span class="number">0x22</span>, <span class="number">0x81</span>, <span class="number">0x83</span>, <span class="number">0x23</span>, <span class="number">0x31</span>,</span><br><span class="line">  <span class="number">0xCB</span>, <span class="number">0x1B</span>, <span class="number">0x22</span>, <span class="number">0xFB</span>, <span class="number">0x25</span>, <span class="number">0xC2</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x73</span>, <span class="number">0x22</span>,</span><br><span class="line">  <span class="number">0xFA</span>, <span class="number">0x03</span>, <span class="number">0x9C</span>, <span class="number">0x4B</span>, <span class="number">0x5B</span>, <span class="number">0x49</span>, <span class="number">0x97</span>, <span class="number">0x87</span>, <span class="number">0xDB</span>, <span class="number">0x51</span>]</span><br><span class="line">s=[]*<span class="built_in">len</span>(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(data),<span class="number">4</span>):</span><br><span class="line">  s.append(((data[i+<span class="number">2</span>]&lt;&lt;<span class="number">5</span>)|(data[i+<span class="number">3</span>]&gt;&gt;<span class="number">3</span>))&amp;<span class="number">0xff</span>)</span><br><span class="line">  s.append((((data[i + <span class="number">3</span>] &lt;&lt; <span class="number">5</span>) | (data[i] &gt;&gt; <span class="number">3</span>))&amp;<span class="number">0xff</span>))</span><br><span class="line">  s.append(((data[i ] &lt;&lt; <span class="number">5</span>) | (data[i +<span class="number">1</span>] &gt;&gt; <span class="number">3</span>))&amp;<span class="number">0xff</span>)</span><br><span class="line">  s.append(((data[i + <span class="number">1</span>] &lt;&lt; <span class="number">5</span>) | (data[i + <span class="number">2</span>] &gt;&gt; <span class="number">3</span>))&amp;<span class="number">0xff</span>)<span class="comment">#位移操作的逆向</span></span><br><span class="line">  <span class="comment">#print(s)</span></span><br><span class="line">flag=[<span class="number">0</span>]*<span class="built_in">len</span>(data)</span><br><span class="line">flag1=[<span class="number">0</span>]*<span class="built_in">len</span>(data)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">  <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>):</span><br><span class="line">    flag[j]=k</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(table),<span class="number">3</span>):</span><br><span class="line">      <span class="keyword">if</span> table[i]==<span class="number">1</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]+=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">2</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]-=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">3</span>:A</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]*=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i]==<span class="number">4</span>:</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]//=table[i+<span class="number">2</span>]</span><br><span class="line">        flag[table[i+<span class="number">1</span>]]&amp;=<span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">5</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] %= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">6</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">7</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] |= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">      <span class="keyword">elif</span> table[i] == <span class="number">8</span>:</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] ^= table[i + <span class="number">2</span>]</span><br><span class="line">        flag[table[i + <span class="number">1</span>]] &amp;= <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">if</span> flag[j]==s[j]:</span><br><span class="line">      flag1[j]=k</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="comment">#爆破vm</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag1)):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(flag1[i]),end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字中国csv--wp</title>
      <link href="/2025/04/02/csv/"/>
      <url>/2025/04/02/csv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这道题对我来说还是太阴间了，我实在是不知道该怎么说好，算是促进我得学习把</p></blockquote><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>首先给了一个.o文件让根据.o文件进行分析加密把.csv文件的数据还原。</p><p>首先是.o文件是linux在编译c语言的时候的中间产物，不必太在意直接当程序看就好</p><p>进入ida里（ida还坏了修了半天&#x2F;(ㄒoㄒ)&#x2F;~~）</p><p><img src="/./../images/csv/7AFB4545058572927E03D3F8D9EC9889-1744031056172-7.png" alt="7AFB4545058572927E03D3F8D9EC9889"></p><p>按x查看他的交叉引用：</p><p><img src="/./../images/csv/863D4DEF0BD9643C1C67B7141BC22DE7-1744031056173-8.png" alt="863D4DEF0BD9643C1C67B7141BC22DE7"></p><p>密钥流的具体加密：</p><p><img src="/./../images/csv/BEC1A03EF7240A3D0B0408E14FADD501-1744031056173-9.png" alt="BEC1A03EF7240A3D0B0408E14FADD501"></p><p><img src="/./../images/csv/B81BC9248A21D05F64BAE23444B89EDD-1744031056173-10.png" alt="B81BC9248A21D05F64BAE23444B89EDD"></p><p>对加密算法的分析</p><p><img src="/./../images/csv/FC692CCA1DF891570CB2116D5250A578-1744031056173-11.png" alt="FC692CCA1DF891570CB2116D5250A578"></p><p>异或的流加密；解密脚本很好写，这个地方虽然数据是一样的，但是却放到了不同的变量，所以写解密脚本的时候要注意，是有一定的区别的。</p><p>所以解密思路就是，先流加密xor然后base64换表编码，然后对于密钥已经知道了是2025年3月15号了。所以尝试一整天的时间伪随机数爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line">standard_base64_chars = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">custom_base64_chars = <span class="string">&quot;QRSTUVWXYZabcdefABCDEFGHIJKLMNOPwxyz0123456789+/ghijklmnopqrstuv&quot;</span></span><br><span class="line"></span><br><span class="line">encode_table = &#123;standard_base64_chars[i]: custom_base64_chars[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(standard_base64_chars))&#125;</span><br><span class="line">decode_table = &#123;custom_base64_chars[i]: standard_base64_chars[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(custom_base64_chars))&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64_encode</span>(<span class="params">data</span>):</span><br><span class="line">    standard_encoded = base64.b64encode(data)</span><br><span class="line">    custom_encoded = <span class="built_in">bytearray</span>(standard_encoded)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(custom_encoded)):</span><br><span class="line">        custom_encoded[i] = encode_table.get(<span class="built_in">chr</span>(custom_encoded[i]), <span class="built_in">chr</span>(custom_encoded[i])).encode(<span class="string">&#x27;utf-8&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(custom_encoded)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64_decode</span>(<span class="params">encoded_data</span>):</span><br><span class="line">    standard_encoded = <span class="built_in">bytearray</span>(encoded_data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(standard_encoded)):</span><br><span class="line">        standard_encoded[i] = decode_table.get(<span class="built_in">chr</span>(standard_encoded[i]), <span class="built_in">chr</span>(standard_encoded[i])).encode(<span class="string">&#x27;utf-8&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    decoded_data = base64.b64decode(<span class="built_in">bytes</span>(standard_encoded))</span><br><span class="line">    <span class="keyword">return</span> decoded_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_555555555329</span>(<span class="params">v3, a2</span>):</span><br><span class="line">    v3[<span class="number">0</span>] = <span class="number">1664525</span></span><br><span class="line">    v3[<span class="number">1</span>] = <span class="number">1013904223</span></span><br><span class="line">    v3[<span class="number">2</span>] = <span class="number">6789237</span></span><br><span class="line">    v3[<span class="number">3</span>] = <span class="number">255</span></span><br><span class="line">    v3[<span class="number">4</span>] = ((a2 * v3[<span class="number">0</span>] + v3[<span class="number">1</span>]) &amp; <span class="number">0xffffffff</span>) % v3[<span class="number">2</span>] % (v3[<span class="number">3</span>] + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sub_5555555553A8</span>(<span class="params">v3</span>):</span><br><span class="line">    v3[<span class="number">4</span>] = ((v3[<span class="number">0</span>] * v3[<span class="number">4</span>] + v3[<span class="number">1</span>]) &amp; <span class="number">0xffffffff</span>) % v3[<span class="number">2</span>] % (v3[<span class="number">3</span>] + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> v3[<span class="number">4</span>]  <span class="comment"># 返回的是 v3[4]，即修改后的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simulate_sub_555555555403</span>(<span class="params">target_time</span>):</span><br><span class="line">    v3 = [<span class="number">0</span>] * <span class="number">24</span>  <span class="comment"># 创建一个长度为 24 的空数组 v3</span></span><br><span class="line">    sub_555555555329(v3, target_time)  <span class="comment"># 填充 v3 数组</span></span><br><span class="line">    <span class="comment"># if v3[4] == 0xea:</span></span><br><span class="line">    <span class="comment">#     print(1111111111111111111111111)</span></span><br><span class="line">    byte_5555555590C0 = [<span class="number">0</span>] * <span class="number">2048</span>  <span class="comment"># 初始化 byte_5555555590C0 数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 填充 byte_5555555590C0 数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2048</span>):</span><br><span class="line">        byte_5555555590C0[i] = sub_5555555553A8(v3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> byte_5555555590C0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\HP\Desktop\一直没有做出来的csv\data01\数据公开与隐私保护附件\data\\2025-03-15.enc.csv&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    enc = <span class="built_in">bytearray</span>(f.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">180</span>):</span><br><span class="line">    tmp = enc[:]<span class="comment">#浅拷贝，可以不影响两个数组</span></span><br><span class="line">    target_time = <span class="number">1742952120</span> + t  <span class="comment"># 这是一个示例的目标时间戳（你应该用实际目标时间戳替换它）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模拟并获取 byte_5555555590C0 数组</span></span><br><span class="line">    result = simulate_sub_555555555403(target_time)</span><br><span class="line">    ptr = result[:]</span><br><span class="line">    xor = result[:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        tmp[i] ^= ptr[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">            ptr[j] ^= xor[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        decoded_data = custom_base64_decode(tmp)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;id&#x27;</span> <span class="keyword">in</span> decoded_data:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Decoded Data: <span class="subst">&#123;decoded_data.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(decoded_data[:<span class="number">10</span>])</span><br><span class="line">    <span class="keyword">except</span> (binascii.Error, UnicodeDecodeError) <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n---\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>还原了原表</p><p><img src="/./../images/csv/2333FA50C83A8BFE2139000B76B07635-1744031056173-12.png" alt="2333FA50C83A8BFE2139000B76B07635"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2025/03/23/web%E5%AD%A6%E4%B9%A0wp/"/>
      <url>/2025/03/23/web%E5%AD%A6%E4%B9%A0wp/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web目录</title>
      <link href="/2025/03/23/web%E7%9B%AE%E5%BD%95/"/>
      <url>/2025/03/23/web%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>.目录遍历</p><h2 id="一-信息泄露"><a href="#一-信息泄露" class="headerlink" title="一.信息泄露"></a>一.信息泄露</h2><h3 id="1-目录遍历"><a href="#1-目录遍历" class="headerlink" title="1.目录遍历"></a>1.目录遍历</h3><h3 id="2-PHPINFO（php网页）"><a href="#2-PHPINFO（php网页）" class="headerlink" title="2.PHPINFO（php网页）"></a>2.PHPINFO（php网页）</h3><h3 id="3-备份文件下载"><a href="#3-备份文件下载" class="headerlink" title="3.备份文件下载"></a>3.备份文件下载</h3><blockquote><p>网站源码</p><p>bak文件，index.php.bak</p><p>vim缓存（swp，swo，swn）</p><p>.DS_Store(网站文件目录:)(.DS_Store)</p><p>index泄露：</p><p>git泄露：log（githack）</p><p>stash泄露，用stash解出（隐藏记录）</p></blockquote><h3 id="4-SVN泄露（dvcs-ripper-）"><a href="#4-SVN泄露（dvcs-ripper-）" class="headerlink" title="4.SVN泄露（dvcs-ripper ）"></a>4.SVN泄露（dvcs-ripper ）</h3><h3 id="5-HG泄露：-使用Mercurial部署会出现HG泄露（dvcs-ripper）"><a href="#5-HG泄露：-使用Mercurial部署会出现HG泄露（dvcs-ripper）" class="headerlink" title="5.HG泄露： 使用Mercurial部署会出现HG泄露（dvcs-ripper）"></a>5.HG泄露： 使用Mercurial部署会出现HG泄露（dvcs-ripper）</h3><h2 id="二-密码口令"><a href="#二-密码口令" class="headerlink" title="二.密码口令"></a>二.密码口令</h2><h3 id="1-弱口令"><a href="#1-弱口令" class="headerlink" title="1.弱口令"></a>1.弱口令</h3><h3 id="2-默认口令"><a href="#2-默认口令" class="headerlink" title="2.默认口令"></a>2.默认口令</h3><h3 id="3-社会工程"><a href="#3-社会工程" class="headerlink" title="3.社会工程"></a>3.社会工程</h3><h2 id="三-SQL注入"><a href="#三-SQL注入" class="headerlink" title="三.SQL注入"></a>三.SQL注入</h2><h3 id="1-SQL注入"><a href="#1-SQL注入" class="headerlink" title="1.SQL注入"></a>1.SQL注入</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;user1&#x27; AND password = &#x27;password1&#x27;;</span><br></pre></td></tr></table></figure><h4 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h4><p>如果攻击者输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户名： admin&#x27; --</span><br><span class="line">密码： anything</span><br></pre></td></tr></table></figure><p>SQL 查询变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE username = &#x27;admin&#x27; --&#x27; AND password = &#x27;anything&#x27;;</span><br></pre></td></tr></table></figure><p>其中 <strong>–</strong> 是 SQL 的注释符号，忽略了密码条件，直接绕过了身份验证。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025.3.20/5</title>
      <link href="/2025/03/20/2025.3.20/"/>
      <url>/2025/03/20/2025.3.20/</url>
      
        <content type="html"><![CDATA[<p>​今天复习了u4单词和主语语法，大雁老师讲的确实很有意思。我确实低估了英语语法的难度。在社团感觉到说不上来的感受，但是我觉得我想多出去走走，这周六有一个“nctf”比赛，周末是校赛，我发现好像除了我自己，不甚至我自己，都没有办法按照我所想的和运行（并不是控制的那种意思）。今天也很不在状态，我感觉到自己是在浪费生命，或许我要是得了一个绝症还是一件令我开心得事情，必竟生命已经倒计时，我的倒计时要是被提前至少我是知道自己的倒计时的时间了。</p><p>​好像每天发生的事情都会给我带来焦虑，我不知道这种感觉是否是正确的，但是弄得我很难受，吵闹，咋呼，令人作呕，仿佛世间所有的美好都与我擦肩而过，我看得见他们，但却握不住他们，或许这就是我这一生的基调吧。窥探别人的幸福令我焦虑，深挖自己的历史令我抑郁，我在这些情感的交织下变得疯狂。世界暗淡，雷声四起，雨点擦过我的睫毛，我摊开双手，迎接这一场疯狂。这仿佛才是我应有的人生格调，我在这种感受下，逐渐兴奋，癫狂。似乎逃离了这平静的世界，拥抱混沌。我睁开眼，风穿透我的四肢，像电流一般爬满我的身体。好像是大自然的怒吼，怒吼着告诉我，还有一线生机。</p><p>​歌曲能给我们带来情绪上的改变，我更希望自己能够不跟别人说话交流，但是那是对的吗？那是不对的，我知道这种氛围是不对的，但是我没有办法去这么做，因为这个环境就是不正常。世界仿佛已经变得畸形，我不知道我该何去何从，我也不知道我是否能够去能够从。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 小记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量分析</title>
      <link href="/2025/03/19/%E6%B5%81%E9%87%8F%E5%8C%85/"/>
      <url>/2025/03/19/%E6%B5%81%E9%87%8F%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h4 id="一-ack包"><a href="#一-ack包" class="headerlink" title="一.ack包"></a>一.ack包</h4><p><strong>TCP协议中的一种数据包，用于确认接收到的数据</strong></p><p>（一般直接筛选掉）他只是确认用的</p><h4 id="SMTP："><a href="#SMTP：" class="headerlink" title="SMTP："></a>SMTP：</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>路线规划</title>
      <link href="/2025/03/19/%E8%B7%AF%E7%BA%BF/"/>
      <url>/2025/03/19/%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ps：细节在下一篇文章里</p></blockquote><blockquote><blockquote><p>最近有点想写小说的冲动，但是文笔不够，做点诗歌放在里面也是不错的</p></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2025.3.14小记</title>
      <link href="/2025/03/12/2025.3.14/"/>
      <url>/2025/03/12/2025.3.14/</url>
      
        <content type="html"><![CDATA[<p>ok,写点日记感觉blog不写点日记不太像一个blog，也可能是实在没啥能写的了</p><p>开始今天的日记：</p><p>这几天都早上7点起的床，身体也逐渐适应了，昨天晚上喝了几杯原浆就醉了，真的难受，幸亏早上没有头疼</p><p>，今天上了计算机操作系统（OS）学习了很多知识，但是今晚上还没有复习，记住的并不是很多。今天格外的累</p><p>明天说好了一起去外面玩，但是，明天我得去医院，我准备早上早起去医院，然后去买药。今天英语没有复习</p><p>这两天状态都不是很好，我得赶紧调整一下状态，在饮食上也有点问题感觉，该少吃点油腻的东西，第一次写日记也不知道该写什么，明天还要去买药，</p><p>私は落ちることができません</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Debug</title>
      <link href="/2024/10/30/Debug/"/>
      <url>/2024/10/30/Debug/</url>
      
        <content type="html"><![CDATA[<p>将IDA安装目录dbgsrv文件夹里的linux_server64拷贝到64位的linux虚拟机中；</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YTk2ZmRjNTg2ODBiMmIxNWNiMzQyOWE1NmEwMmY5ZDhfUmVnM09lWXBEV1dQakV4M0F2VVpCeXdZN1Y3eEdPNWVfVG9rZW46QTZMQmJEZGFMb0ExSGZ4RHlGYmNRaG9hbkJlXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MWQ5MDU1M2QxNWY1NGJjYTc1YmEyYWY4OGIxNGIzMjdfaDNFYUxqN1NHRGFQaHdPTU15b0dyazRVd3JGOTFKampfVG9rZW46VWNpWmJwS2ZTb0NEV0R4dXE0VGNUeHdpbmJkXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>在虚拟机的终端中通过命令chmod 777 linux_server64为程序添加可执行权限；</p><p>通过命令.&#x2F;linux_server64开启服务端；</p><p>在IDA中点击Debugger，添加Remote Linux Debugger</p><p>点击Debugger下的Process Option进行如下配置：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MzdiZDY3NWIyOGZlNTVhYjZlYTljYWQ2OGVlODIzODNfMENLazFjSXJuZ1M1UjVxc2tzc0ExOFQyY2RaS1FQQ2FfVG9rZW46TTlhNGIxa0JSb0FUQnJ4MGZyMWNlZlBRblNlXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>需要更改的只有Hostname那一行：在虚拟机中使用ifconfig查看</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MzAzYTgwZTcyZDMwMDY4NGYyMThkY2JkM2EzZGE0ZDJfS1dYOWE3cnk3ZGlhelZkWnhra3dLVDJZSFhwQ0x2bERfVG9rZW46SXE3NGJSMnNmb0xpeWZ4QXlETmNCcWVSbmdkXzE3MzA0NjgxNDU6MTczMDQ3MTc0NV9WNA" alt="img"></p><p>后面的端口默认23946</p><p>前三行都是可执行文件在linux虚拟机中的位置</p><p>Hostname是虚拟机的IP，端口用默认值</p><p>动态调试的时候启动Linux_serverx64服务之后在ida中选择远程Linux调试就OK了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>校赛wp</title>
      <link href="/2024/10/24/%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2024/10/24/%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<p>1.用die打开查壳</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YWM0NGQzNzQyYmUzZWM3ZWU1MGNkMmVmMjI5ZWVhMzJfdE52VVJ5MzVIRHBHNk5qQ0U4YVdFYndaVlN6ZjJTTEVfVG9rZW46UXNpR2I0OTlvb0NMUkF4MGFUOGNkbG9tbm1mXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>发现是32位的然后是无壳：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=NTMwMjFmMzc5MmQ1OTE5MTFjMGRjZTA3MGM2MTU5NjFfNm9qRTRqSGx6dG1YWllVMW5uTVJhcE0wZXQ1V0JJNWRfVG9rZW46QjZMVGJISzBUb1lZRXJ4ODIyMGNjRm5SbmRoXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>这是数据</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=ZmYzZjdjOTQwNWRiZTliYjg3MmQzNjQ3YzBlZDU5NzBfNXQ3WDZyOGtWVnVMRVBOR1FRSEJuR1FTSmNWTlJjaDhfVG9rZW46QkQwYmJjV2dBb21JSnl4NFRLWGNibUlqbmZnXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>点他按“d”</p><p>变成这个</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MTkyOTc0NmJmMjVjM2Q5MTQ4MTQxYWQzZDEwZTE1YjJfYjNqRWhxSjdsYlNZdFV1YTJQbTlITFNZcTZoaEowZ2lfVG9rZW46SkJGU2JrNWU5b3U5UmF4WFNJSWM4SUJqbjNkXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MDgzYmM1Mzk3ZGYzOTRjMDRhNTgxMTMwMjMzNDE1OTZfWTBLNWNYUjhIWnZzcVdvR0NjOVBieFRwbERNTzh4T2xfVG9rZW46SGdrMWJwQjVIb2pnam14RjlQSGNHN3hHbmxlXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>选中使用convert这个功能</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjRjYmZhMjQwYWNjNjlmNWE2OTE1MmVjYWVjYzM1ZTdfSFBNcDZMN2JHbWwyM2J5MldRNEFpSlU5MUNsUlA1dE1fVG9rZW46VDNqYWIzQ3hqb2JYMEF4WkY0bGN5UXI5bjlkXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>选中这个C++byte这个选项</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YTE0MTk3Njk4ZGU5ZGM1ZjgzZDVmZTBhNDBlNTYzNzJfcG9EM0ZwdlpOM3o5STFSQWxUd0NjdFJJYjVrZFZlU0FfVG9rZW46TnVhSmJwMDdob3p5WnR4NnN6RWNZVUhhblhmXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=YzFlOGRlYWQzZWIzYmFmNmZkZTVlNTI4YjMxMDBmMmNfNlR1Uk5pUDQyWHNuWVhTQWp0ck5KNHRDTHlQMkhzcTlfVG9rZW46TkJzMmI0dWM0b1BabE14dThZOGM2V1FobndiXzE3MzA0Njc5OTg6MTczMDQ3MTU5OF9WNA" alt="img"></p><p>写个python脚本就出来了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=[<span class="number">0x56</span>, <span class="number">0x4B</span>, <span class="number">0x49</span>, <span class="number">0x52</span>, <span class="number">0x7C</span>, <span class="number">0x7F</span>, <span class="number">0x37</span>, <span class="number">0x55</span>, <span class="number">0x58</span>, <span class="number">0x46</span>, <span class="number">0x69</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0x4C</span>, <span class="number">0x46</span>, <span class="number">0x6E</span>,<span class="number">0x32</span>,<span class="number">0x66</span>,<span class="number">0x7a</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i]^=<span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(a[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hook</title>
      <link href="/2024/10/22/hook/"/>
      <url>/2024/10/22/hook/</url>
      
        <content type="html"><![CDATA[<p>第一次hook成功有点兴奋所以写一篇总结：</p><h2 id="1whatishook"><a href="#1whatishook" class="headerlink" title="1whatishook"></a>1whatishook</h2><p>xposed是一款可以在不修改APK的情况下景程序运行的框架，基于它可以制作出许多功能强大的模块，且在功能不,冲突的情况下同时运作。在这个框架下，我们可以编写并</p><p>加载自己编写的插件APP，实现对目标apk的注入拦载等。</p><p>假如签名校验无法绕过，则可利用xposed或frida去hook</p><p>原理</p><p>用自己实现的app_process普换掉了系统原本提供的app_process，加载一个额外的jar包，入口从原来的:com.android.internal.0sygoteInit.main(O)被替换成了:</p><p>de.robvandroid.xposed.XposedBridge.main(),</p><p>创建的Zygote进程就变成Hook的zygote进程了，从而完成对zygote进程及其创建的Dalvik&#x2F;ART虚拟机的劫持(zytoge注入)</p><h2 id="2开始配置xposed："><a href="#2开始配置xposed：" class="headerlink" title="2开始配置xposed："></a>2开始配置xposed：</h2><p>.Android Studio创建新项目</p><p>2.将下载的xposedBridgeApi.jar包拖进libs文件夹</p><p>3.右击jar包，选择add as library</p><p>4.修改xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedmodule&quot;android:value=&quot;true&quot; /&gt;<span class="comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposeddescription&quot;android:value=&quot;这是一个Xposed模块&quot; /&gt;<span class="comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedminversion&quot;android:value=&quot;89&quot; /&gt;</span><br></pre></td></tr></table></figure><p>5.修改build.gradle,将此处修改为compileOnly 默认的是implementation</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">implementation</span> 使用该方式依赖的库将会参与编译和打包</span><br><span class="line">compileOnly 只在编译时有效，不会参与打包</span><br></pre></td></tr></table></figure><p>6.新建–&gt;Folder–&gt;Assets Folder，创建xposed_init(不要后缀名):只有一行代码，就是说明入口类</p><p>记得详细到类名（第一次就是没详细到类名出现问题耗了半天）S</p><p>7.新建Hook类，实现IXposedHookLoadPackage接口，然后在handleLoadPackage函数内编写Hook逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage; </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了IXposed HookLoad SPackag便拥有了hook的能力</p><h2 id="3如何去实际hook"><a href="#3如何去实际hook" class="headerlink" title="3如何去实际hook"></a>3如何去实际hook</h2><p>首先连接到模拟机：我这个as直接给我连接到了有点nb平常应该是需要用adb来连接</p><p>前面都配置完之后写Hook的逻辑之后先启动钩子在启动程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                    String <span class="built_in">str</span> = (String) param.args[<span class="number">0</span>];</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 被调用: str=&quot;</span> + <span class="built_in">str</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                    param.setResult(<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">int</span> result = (<span class="built_in">int</span>) param.getResult();</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 结果=&quot;</span> + result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);//这段代码使用了 Xposed 框架中的 XposedHelpers.findAndHookMethod 方法，主要用于在指定类的方法调用时插入自定义逻辑。具体来看，代码的各个部分的意义如下：</span><br><span class="line"></span><br><span class="line">           // <span class="string">&quot;com.example.test.MainActivity&quot;</span>：这是你要拦截的目标类的全名。在这里，MainActivity 是该应用的一个</span><br><span class="line">            //Activity。</span><br><span class="line"></span><br><span class="line">            //loadPackageParam.classLoader：这是加载该应用的类加载器，确保可以找到并操作目标类。</span><br><span class="line"></span><br><span class="line">            //<span class="string">&quot;check&quot;</span>：这是要拦截的方法名称。在这个例子中，是 MainActivity 类中的 check 方法。</span><br><span class="line"></span><br><span class="line">            //String.<span class="keyword">class</span>：这是方法参数的类型。在这个例子中，check 方法接受一个 String 类型的参数。</span><br><span class="line"></span><br><span class="line">            //new XC_MethodHook() &#123; ... &#125;：这是一个匿名类，用于定义你希望在 check 方法调用时执行的逻辑。这个类可以重写以下两个方法：</span><br><span class="line"></span><br><span class="line">            //beforeHookedMethod：在目标方法被调用之前执行的代码。</span><br><span class="line">            //afterHookedMethod：在目标方法被调用之后执行的代码。</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中具体的模板是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是xposed的hook方法</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/10/19/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/10/19/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>这是一个测试，测试</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
